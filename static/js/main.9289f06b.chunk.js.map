{"version":3,"sources":["components/Home.tsx","components/Questionnaire.tsx","components/App.tsx","i18n/i18n.ts","serviceWorker.ts","index.tsx"],"names":["Title","Typography","Paragraph","Home","className","to","type","size","require","setApiKey","Questionnaire","useTranslation","t","i18n","useState","currentQuestionNumber","setCurrentQuestionNumber","allAnswers","setAllAnswers","shi_questions_bank","allQuestions","isSurveyCompleted","setIsSurveyCompleted","speech_score","psychosocial_score","total_score","scores","setScores","useEffect","scoreMap","Map","forEach","question","i","tags","indexOf","get","calculateScoreEffect","onClick","window","print","percent","Math","round","length","level","questionTitle","Object","entries","answers","map","answer","index","block","key","answerId","concat","App","changeLanguage","lng","title","subTitle","extra","path","resources","en","translation","englishTranslation","ko","koreanTranslation","it","italianTranslation","zh","chineseTranslation","fr","frenchTranslation","use","initReactI18next","init","keySeparator","interpolation","escapeValue","Boolean","location","hostname","match","Loader","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9289f06b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Typography } from 'antd';\nimport { Link } from 'react-router-dom'\n\nconst { Title, Paragraph } = Typography;\n\nconst references = [\n  {\n    authors: \"Rinkel, R. N., Leeuw, I. M. V. D., van Reij, E. J., Aaronson, N. K., & Leemans, C. R.\",\n    year: \"2008\",\n    title: \"Speech Handicap Index in patients with oral and pharyngeal cancer: better understanding of patients' complaints. Head & Neck: Journal for the Sciences and Specialties of the Head and Neck\"\n  }\n]\n\nconst Home = () => {\n  \n  return (\n    <div className=\"home\">\n      <Title> Digital Speech Handicap Index (SHI) </Title>\n      <Paragraph>\n        These are some statements that many people may have used to describe their speech and the effects of\n        their speech on their lives. Please tick the response that indicates how frequently you have the same experience.\n      </Paragraph>\n      <Link to=\"/digital-shi/questionnaire\">\n        <Button type=\"primary\" size=\"large\">\n            Take the SHI Questionnaire\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport { Button, Progress, Typography } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport shi_questions_bank from \"../assets/shi_questions_bank.json\";\nimport './Questionnaire.scss'\n\nconst { Title } = Typography;\nconst sgMail = require('@sendgrid/mail');\nsgMail.setApiKey(\"\");\n\nconst Questionnaire = () => {\n  const { t, i18n } = useTranslation();\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);\n  const [allAnswers, setAllAnswers] = useState<string[]>([]);\n  const [allQuestions, setAllQuestions] = useState(shi_questions_bank);\n  const [isSurveyCompleted, setIsSurveyCompleted] = useState(false);\n  const [scores, setScores] = useState({speech_score: 0, psychosocial_score: 0, total_score: 0})\n\n  const submitAnswer= (answerId: string) => {\n    setAllAnswers(allAnswers => {\n      const newAllAnswers = allAnswers.concat(answerId);\n      return newAllAnswers;\n    })\n    if(currentQuestionNumber +1  === allQuestions.length){\n      setIsSurveyCompleted(true);\n    }\n    setCurrentQuestionNumber(currentQuestionNumber + 1);\n  }\n\n  const calculateScoreEffect = () => {\n    let scoreMap = new Map([[\"a0\", 0],[\"a1\", 1], [\"a2\", 2],[\"a3\",3],[\"a4\",4] ]);\n    var speech_score = 0;\n    var psychosocial_score =0;\n    var total_score = 0;\n    allQuestions.forEach( (question,i) => {\n      if(question.tags.indexOf('speech') !== -1){\n        speech_score = speech_score + (scoreMap.get(allAnswers[i]) || 0);\n      }\n      if(question.tags.indexOf('psychosocial') !== -1){\n        psychosocial_score = psychosocial_score + (scoreMap.get(allAnswers[i]) || 0);\n      }\n      total_score = total_score + (scoreMap.get(allAnswers[i]) || 0);\n    })\n    setScores({speech_score: speech_score, psychosocial_score: psychosocial_score, total_score: total_score});\n  }\n\n  useEffect(()=>{\n    calculateScoreEffect();\n  },[isSurveyCompleted])\n\n  if(!isSurveyCompleted){\n    return (\n      <div className=\"questionnaireContainer\">\n        <Progress percent={Math.round(currentQuestionNumber * 100 / allQuestions.length)} />\n        <Title level={3}>\n          { t(allQuestions[currentQuestionNumber].questionTitle) }\n        </Title>\n        <div className=\"questionnaireChoicesContainer\">\n          {Object.entries(allQuestions[currentQuestionNumber].answers).map((answer, index) => {\n            return (\n                <Button className=\"choiceContainer\" block={true} key={answer[0]} onClick={() => submitAnswer(answer[0])}> {t(answer[1])} </Button>\n            ) \n          })}\n        </div>\n      </div>\n    );\n  } else {\n\n    return (\n      <div>\n        <p>Total Score: {scores.total_score}</p>\n        <p>Psychosocial Score: {scores.psychosocial_score}</p>\n        <p>Speech Score: {scores.speech_score}</p>\n        <Button\n          onClick={()=>{window.print()}}\n        >\n            Print\n        </Button>\n      </div>\n    )\n  }\n\n}\n\nexport default Questionnaire;","import React from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { PageHeader, Button } from \"antd\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport \"antd/dist/antd.css\";\nimport Home from './Home';\nimport Consent from './Consent';\nimport Questionaire from './Questionnaire';\nimport './App.scss';\n\nconst App = () => {\n  const { t, i18n } = useTranslation();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n  };\n\n  return (\n    <div className=\"App\">\n      <PageHeader\n        className=\"\"\n        title=\"SHI Questionaire\"\n        subTitle=\"A questionaire to help you identify your speech problem\"\n        extra={[\n          <Button className=\"localeButton\" size=\"small\" key=\"en\" onClick={() => changeLanguage('en')}> English</Button>,\n          <Button className=\"localeButton\" size=\"small\" key=\"ko\" onClick={() => changeLanguage('ko')}> Korean </Button>,\n          <Button className=\"localeButton\" size=\"small\" key=\"it\" onClick={() => changeLanguage('it')}> Italian </Button>,\n          <Button className=\"localeButton\" size=\"small\" key=\"zh\" onClick={() => changeLanguage('zh')}> Cantonese (Chinese)</Button>,\n          <Button className=\"localeButton\" size=\"small\" key=\"fr\" onClick={() => changeLanguage('fr')}> French </Button>\n        ]}\n      />\n      <Router>\n        <Switch>\n          <Route path=\"/digital-shi/questionnaire\">\n            <Questionaire />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import i18n from 'i18next';\nimport englishTranslation from './en/translation.json';\nimport chineseTranslation from './zh/translation.json';\nimport koreanTranslation from './ko/translation.json';\nimport italianTranslation from './it/translation.json';\nimport frenchTranslation from './fr/translation.json';\nimport { initReactI18next } from 'react-i18next';\n\nconst resources = {\n  en: {\n    translation: englishTranslation,\n  },\n  ko : {\n    translation: koreanTranslation\n  },\n  it : {\n    translation: italianTranslation\n  },\n  zh : {\n    translation: chineseTranslation\n  },\n  fr : {\n    translation: frenchTranslation\n  }\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'en',\n  keySeparator: false,\n  interpolation: {\n    escapeValue: false // react already safes from xss\n  }\n});\n\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport './i18n/i18n';\nimport * as serviceWorker from './serviceWorker';\n\nconst Loader = () => (\n  <div className=\"App\">\n    <div>loading...</div>\n  </div>\n);\n\nReactDOM.render(\n    <Suspense fallback={<Loader />}>\n      <App />\n    </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}